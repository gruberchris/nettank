# .github/workflows/release.yml
name: Create Release and Publish to GitHub Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.0) - Tag v<version> will be created'
        required: true
  push:
    tags:
      - 'v*.*.*'

jobs:
  release_and_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          # Configure Maven settings to publish to GitHub Packages
          server-id: github # Must match <id> in pom.xml's distributionManagement
          server-username: GITHUB_ACTOR # Uses the GITHUB_TOKEN secret
          server-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Version from Tag or Input
        id: get_version
        run: |
          # For push events (tags), get version from tag name
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${{ github.ref_name }}"
            # Remove 'v' prefix
            VERSION="${TAG_NAME#v}"
            echo "Version from tag: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          # For workflow_dispatch events, use input and construct tag name
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v${VERSION}"
            echo "Version from input: $VERSION"
            # Check if tag already exists
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "Tag $TAG_NAME already exists. Using existing tag."
            else
              echo "Creating and pushing tag $TAG_NAME"
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              git tag -a "$TAG_NAME" -m "Release $VERSION"
              # Ensure the push uses the token for authentication if needed
              git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "$TAG_NAME"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed for git push in workflow_dispatch

      - name: Update POM versions to release version
        run: |
          mvn -B versions:set -DnewVersion=${{ steps.get_version.outputs.version }} -DprocessAllModules -DgenerateBackupPoms=false
          echo "Updated POMs to version ${{ steps.get_version.outputs.version }}"

      - name: Display Maven settings.xml content
        run: |
          echo ">>> Content of $HOME/.m2/settings.xml <<<"
          cat $HOME/.m2/settings.xml || echo "settings.xml not found or cannot be read."
          echo ">>> End of settings.xml <<<"

      - name: Build, Package and Publish to GitHub Packages
        # Explicitly tell Maven to use the settings file created by setup-java
        run: mvn -B -s $HOME/.m2/settings.xml deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: Release ${{ steps.get_version.outputs.tag_name }}
          generate_release_notes: true
          files: |
            nettank-client/target/nettank-client-${{ steps.get_version.outputs.version }}.jar
            nettank-server/target/nettank-server-${{ steps.get_version.outputs.version }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}