# .github/workflows/release.yml
name: Create Release and Publish to GitHub Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.0) - Tag v<version> will be created'
        required: true
  push:
    tags:
      - 'v*.*.*'

jobs:
  release_and_publish:
    # Run on Linux - it doesn't matter for building the universal client JAR now
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for version update, tag push, and release creation
      packages: write # Needed for mvn deploy to GitHub Packages and docker push to GHCR
      security-events: write # Optional: For dependency graph submission

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for version bumping and tagging

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven # Cache Maven dependencies

      - name: Create Maven settings.xml
        # Using bash heredoc for clarity
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<'EOF'
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                    https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id> <!-- ID must match repository/distributionManagement in pom.xml -->
                <!-- Maven uses GITHUB_TOKEN env var for auth when using default settings -->
                <!-- Explicitly setting username/password can also work -->
                 <username>${env.GITHUB_ACTOR}</username>
                 <password>${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
             <activeProfiles>
                <activeProfile>github</activeProfile> <!-- Activate profile if needed for repository URL -->
             </activeProfiles>
          </settings>
          EOF
          echo "Maven settings.xml created."
          # Ensure GITHUB_TOKEN is available for subsequent Maven commands if needed directly
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Get Version from Tag or Input
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${{ github.ref_name }}"
            # Remove 'v' prefix if present
            VERSION="${TAG_NAME#v}"
            echo "Version from tag: $VERSION"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG_NAME="v${VERSION}"
            echo "Version from input: $VERSION"
            # Check if tag already exists
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "Tag $TAG_NAME already exists. Using existing tag."
            else
              echo "Creating and pushing tag $TAG_NAME"
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              git tag -a "$TAG_NAME" -m "Release $VERSION"
              # Use GITHUB_TOKEN for authentication
              git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" "$TAG_NAME"
            fi
          else
            echo "Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        env:
          # GITHUB_TOKEN is automatically available, but explicitly passing it for git push
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update POM versions to release version
        run: |
          mvn -B versions:set -DnewVersion=${{ steps.get_version.outputs.version }} -DprocessAllModules -DgenerateBackupPoms=false
          echo "Updated POMs to version ${{ steps.get_version.outputs.version }}"
          # Optional: Commit and push the version change back to the branch (if not a tag push)
          if [[ "${{ github.event_name }}" != "push" ]]; then
             git config user.name "GitHub Actions"
             git config user.email "actions@github.com"
             git commit -am "chore: Bump version to ${{ steps.get_version.outputs.version }}"
             # Push back to the branch that triggered workflow_dispatch (might need tweaking based on your branching)
             # Or just rely on the tag being the source of truth
             # git push origin HEAD:${{ github.ref }} # Example push back
             echo "Skipping commit/push of version bump for non-push event."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Build, Package and Publish All Modules to GitHub Packages
        # Deploy will compile, test (unless skipped), package, and deploy artifacts
        # The client JAR produced now contains all natives
        run: mvn -B deploy -DskipTests
        env:
          # GITHUB_TOKEN is used by Maven deploy via settings.xml or env var inference
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Update dependency graph
      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@v4
        continue-on-error: true

      # --- Docker Build Steps (Keep as is or adjust context/Dockerfile path) ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Server Docker Image
        uses: docker/build-push-action@v5
        with:
          context: . # Assuming Dockerfile is in the root
          file: ./Dockerfile # Specify Dockerfile location
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/nettank-server:${{ steps.get_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/nettank-server:latest
          build-args: |
            # Pass version if your Dockerfile needs it
            VERSION=${{ steps.get_version.outputs.version }}
            # Ensure your Dockerfile copies the correct server JAR path
            SERVER_JAR_PATH=nettank-server/target/nettank-server-${{ steps.get_version.outputs.version }}.jar

      # --- GitHub Release Step ---
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: Release ${{ steps.get_version.outputs.tag_name }}
          generate_release_notes: true # Auto-generate release notes
          files: |
            # Adjust the client JAR name if your shade plugin configuration adds a suffix like "-jar-with-dependencies"
            nettank-client/target/nettank-client-${{ steps.get_version.outputs.version }}.jar
            nettank-server/target/nettank-server-${{ steps.get_version.outputs.version }}.jar
            # Add any other files you want to attach to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needs token to create release and upload assets